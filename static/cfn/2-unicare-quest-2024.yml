# Copyright 2023 Amazon.com and its affiliates; all rights reserved.
# This file is Amazon Web Services Content and may not be duplicated or distributed without permission.
AWSTemplateFormatVersion: "2010-09-09"
Description: Functional Programming Quest - Team

Parameters:
  # These parameters are supplied by the Quests API when this template is deployed 
  DeployAssetsBucket:
    # Default: ee-assets-prod-us-east-1
    Description: The name of the S3 bucket where assets are stored
    Type: String
  DeployAssetsKeyPrefix:
    # Default: modules/9c0e89820b864addaed45ec2f5440379/v5/
    Description: S3 key prefix where assets are stored
    Type: String

  # Additional parameters required by this template
  QuestId:
    Default: 2ae514a9-a6dc-4fc0-a797-3f4a7bbd1d63
    Description: The ID assigned to this Quest
    Type: String

  TeamLambdaSourceKey:
    Default: gdQuests-team-lambda-source.zip
    Description: S3 key for the Lambda source code used by the team account for the Quest
    Type: String
  StaticAssetsBucket:
    Type: String
    Description: (Optional) Bucket for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''
  StaticAssetsKeyPrefix:
    Type: String
    Description: (Optional) Bucket prefix for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''

# VpcId: !GetAtt ResourceLookup.VpcId

Resources: 
  # ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
  # ? AWS GameDay Quests - Team Enable Resources                                                                                                               ?
  # ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
  # ? LambdaRole            ? AWS::IAM::Role              ? Execution role for the resource lookup Lambda                                                      ?
  # ? ResourceLookupLambda  ? AWS::Lambda::Function       ? Lambda Function that looks up default resources in the account                                     ?
  # ? ResourceLookup        ? Custom::ResourceLookup      ? Custom provisioning logic invoking the Resource Lookup                                             ?
  # ? WebAppOnEC2           ? AWS::EC2::Instance          ? An EC2 instance that runs a simple Apache Web App                                                  ?
  # ? InstanceProfile       ? AWS::IAM::InstanceProfile   ? The IAM instance profile used by WebAppOnEC2                                                       ?
  # ? InstanceRole          ? AWS::IAM::Role              ? The name of the role to associate with the instance profile                                        ?
  # ? PublicSecurityGroup   ? AWS::EC2::SecurityGroup     ? The security group added to WebAppOnEC2                                                            ?
  # ? DeveloperUser         ? AWS::IAM::User              ? The IAM user pretended to be compromised                                                           ?
  # ? AccessKeys            ? AWS::IAM::AccessKey         ? The "compromised" access key for DeveloperUser                                                     ?
  # ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for internally-invoked Lambda resources
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: "*"
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeVpcEndpoints
            - ec2:DescribeVpcEndpointServices
            - ec2:DescribeVpcAttribute
            - ec2:DescribeSubnets
            - ec2:DescribeRouteTables
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSecurityGroupRules
            Resource: "*"

  ResourceLookupLambda:
    Type: AWS::Lambda::Function
    Description: Lookup resources
    Properties:
      Handler: "resource_lookup.lambda_handler"
      Runtime: python3.10
      Timeout: '30'
      Code:
        S3Bucket: !Ref DeployAssetsBucket
        S3Key: !Join
          - ''
          - - !Ref DeployAssetsKeyPrefix
            - !Ref TeamLambdaSourceKey
      Role: !GetAtt LambdaRole.Arn

  ResourceLookup:
    Type: Custom::ResourceLookup
    Properties:
      ServiceToken: !GetAtt ResourceLookupLambda.Arn

  MLRepoAssetParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /GameDay/CodeServerAsset/MLRepo
      Type: String
      Value: !Sub |
         {"bucket" : "${StaticAssetsBucket}", "key" : "${StaticAssetsKeyPrefix}ml_repo.zip"}
      
      Description: Queue Arn

  # MLRepo:
  #   Type: AWS::CodeCommit::Repository
  #   Properties:
  #     RepositoryName: unicare_diagnostics
  #     RepositoryDescription: Repository for the Unicorn Healthcare Quest
  #     Code:
  #       BranchName: main
  #       S3: 
  #         Bucket: !Ref DeployAssetsBucket
  #         Key: !Join
  #           - ''
  #           - - !Ref DeployAssetsKeyPrefix
  #             - ml_repo.zip  



Outputs:

  # This section modifies the team's TeamRole IAM role to restrict the listed actions on the specified resources.
  # The purpose is to avoid that a team cheats by picking into or execute resources they shouldn't be able to manipulate
  QuestsResourceLocks:
    Description: A JSON object that defines what IAM actions to restrict as a result of deploying this template
    Value: !Sub |-
      [
        {
          "Actions": [
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:PublishVersion",
            "lambda:RemovePermission",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:UpdateFunctionUrlConfig",
            "lambda:UpdateFunctionEventInvokeConfig"
          ],
          "Resources": [
            "${ResourceLookupLambda.Arn}"
          ]
        }
      ]
